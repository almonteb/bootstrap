# some more ls aliases
alias ls='ls -G --color'
alias ll='ls -laGh'
alias l='ls -CF'
alias ..='cd ..'

# ruby
function gemi() {
  gem install $* --no-rdoc --no-ri
}

# git-related aliases
alias gl="git log --pretty=format:'%h | %s (%an, %ar)'"
alias gc="git add .; git commit -v"
alias gp="git push"
alias gu="git pull"
alias gs="git status"
alias g="git status"
alias gd="git diff"
alias gr="git remote"
alias gll="git log --color --pretty=format:'%h | %s (%an, %ar)' | head -10"

function gg() {
  git commit -v -a -m "$*"
}
# prevention aliases
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
# -> Prevents accidentally clobbering files.
alias mkdir='mkdir -p'

# great outputs
alias du='du -kh'       # Makes a more readable output.
alias df='df -h'
alias less='less -R'

# top
alias tu='top -o cpu'
alias tm='top -o vsize'

alias killbg='kill %${(k)^jobdirs}'

alias sudo='sudo -E'
function tophist() {
    cat $HISTFILE | awk '{print $2}' | awk 'BEGIN {RS=";"}{print $1}' | sort | uniq -c | sort -nr | head
}

function take {
  mkdir $1
  cd $1
}

function extract()      # Handy Extract Program.
{
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

calc(){ awk "BEGIN{ print $* }" ;}

function scratch {
  local parent="$HOME/tmp/scratch"
  local latest="$parent/latest"
  local scratch="$parent/scratch-`date +'%s'`"
  mkdir -p $scratch
  ln -nfs $scratch $latest
  cd $latest
  echo "Created $scratch"
}

function virtualenv_info {
    [ $VIRTUAL_ENV ] && echo '('`basename $VIRTUAL_ENV`')'
}

brew-cask-upgrade() {
  (set -x; brew update;)
  (set -x; brew cleanup;)
  (set -x; brew cask cleanup;)
  while read pkg_ver; do
    pkg=$(echo ${pkg_ver} | cut -d' ' -f1)
    brew cask info ${pkg} | head -n1 | tr -d ':' | grep -vqF "${pkg_ver}" \
      && (set -x; brew cask uninstall ${pkg} --force) \
      && (set -x; brew cask install ${pkg} --force)
  done < <(brew cask list --versions)
  (set -x; brew cleanup;)
  (set -x; brew cask cleanup;)
}
